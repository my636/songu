<?php//微博Api接口class WeiboStatusesApi extends Api{	//获取最新更新的公共微博消息	function public_timeline(){		return model('Feed')->public_timeline($this->data['type'], $this->since_id, $this->max_id, $this->count, $this->page) ;	}	//获取当前用户所关注用户的最新微博信息	function friends_timeline(){		return model('Feed')->friends_timeline($this->data['type'], $this->mid, $this->since_id, $this->max_id, $this->count, $this->page) ;	} 		//获取用户发布的微博信息列表	function user_timeline() {		return model('Feed')->user_timeline($this->data['type'], $this->user_id, $this->user_name, $this->since_id, $this->max_id, $this->count, $this->page) ;	}	//获取当前用户的@列表	function mentions(){		return model('Atme')->mentions($this->mid, $this->since_id, $this->max_id, $this->count, $this->page, $this->data['table']);	}	//提到我的feed	function mentions_feed(){		return model('Atme')->mentions_feed($this->mid, $this->since_id, $this->max_id, $this->count, $this->page);	}		//收藏的feed列表	function favorite_feed(){		return model('Collection')->getCollectionFeedForApi($this->mid, $this->since_id, $this->max_id, $this->count, $this->page);	}	//某条微薄详细内容	function show(){		return model('Feed')->getFeedInfo($this->id, true);	}		//发布一条微薄	function update($data){		$data['uid'] 		= $this->mid;		$data['body']		= $this->data['content'];		$data['from']		= $this->data['from'] ? intval($this->data['from']) : '0';		$data['app']        = $this->data['app_name'] ? $this->data['app_name'] : 'public';		$data['type']       = isset($data['type']) ? $data['type'] : 'post';		$data['app_row_id'] = $this->data['app_id'] ? $this->data['app_id']:'0';		$data['publish_time']= time();				$feed_id =  model('Feed')->data($data)->add();				//更新最近@的人
		model( 'Atme' )->updateRecentAt( $data['body'] );				// 添加关联数据		$feed_data = D('FeedData')->data(array('feed_id'=>$feed_id,'feed_data'=>serialize( $data ),'client_ip'=>get_client_ip(),'feed_content'=>$data['body']))->add();		if( $feed_id && $feed_data ){			//加积分			model('Credit')->updateUserCredit($this->mid,'weibo_add');			//Feed数			model('UserData')->setUid($this->mid)->updateKey('feed_count',1);			//if($app =='public'){ //TODO 微博验证条件				model('UserData')->setUid($this->mid)->updateKey('weibo_count',1);			//}					return $feed_id;		}else{			return 0;		}	}	public function upload(){		$d['attach_type'] = 'feed_image';		$d['upload_type'] = 'image';				$GLOBALS['fromMobile'] = true;    	$info = model('Attach')->upload($d);    	if($info['status']){    		$data['type'] = 'postimage';//图片类型微博    		$data['attach_id'] = array($info['info'][0]['attach_id']);    		return $this->update($data);    	}else{    		return 0;//上传失败    	}	}	//删除一条微博	function destroy(){		$return  = model('Feed')->doEditFeed($this->id,'delFeed','删除');		return (int) $return['status'];	}	//转发一条微博	function repost(){		$p['app_name'] = $this->data['app_name'] ? $this->data['app_name'] : 'public';		$p['comment']  = $this->data['comment'];		$p['body']     = $this->data['content'];		$p['sid']      = $this->id;			$p['type']	   = isset($this->data['type']) ? $this->data['type'] : 'feed';		$p['from']     = $this->data['from'] ? intval($this->data['from']) : '0';		$p['forApi']   = true;		$return = model('Share')->shareFeed($p);		if($return['status'] == 1){			//添加积分			model('Credit')->updateUserCredit($this->mid,'weibo_share');					}		return (int) $return['status'];	}	//获取指定微博的评论列表	function comments(){		$where = "row_id ='{$this->id}' AND `table`='feed'";		return model('Comment')->getCommentListForApi($where,$this->since_id , $this->max_id , $this->count , $this->page);	}	//获取指定微博的转发列表	function reposts(){		return model('Feed')->repost_timeline($this->id, $this->since_id, $this->max_id, $this->count, $this->page) ;	}	//获取当前用户收到的评论	function comments_to_me() {		$where = " ( app_uid = '{$this->mid}' or to_uid = '{$this->mid}' )";		return model('Comment')->getCommentListForApi($where,$this->since_id , $this->max_id , $this->count , $this->page,true);	}	//获取当前用户发出的评论	function comments_by_me() {		$where = " uid = '{$this->mid}' ";		return model('Comment')->getCommentListForApi($where,$this->since_id , $this->max_id , $this->count , $this->page,true);	}	//发布评论	function comment(){		$ifShareFeed = isset($this->data['ifShareFeed']) ? $this->data['ifShareFeed'] : '0';		$data['app']    = isset($this->data['app_name']) ? $this->data['app_name'] :'public';		$data['table']  = isset($this->data['table_name']) ? $this->data['table_name'] : 'feed';    	$data['app_row_id']  = isset($this->data['app_row_id']) ? $this->data['app_row_id'] : '0';    	$data['app_uid']	 = isset($this->data['app_uid']) ? $this->data['app_uid'] : '0';    	$data['comment_old'] = isset($this->data['comment_old']) ? $this->data['comment_old'] : '0';    	$data['content']	 = isset($this->data['content']) ? $this->data['content'] : '';	//评论内容    	$data['row_id'] 	 = isset($this->data['row_id']) ? $this->data['row_id'] : '0';    	$data['to_comment_id'] = isset($this->data['to_comment_id']) ? $this->data['to_comment_id'] : '0';    	$data['to_uid']		= isset($this->data['to_uid']) ? $this->data['to_uid'] : '0';    	if($data['comment_id'] = model('Comment')->addComment($data,true)){    		//转发到我的微博    		if($ifShareFeed == 1){    			//根据评论的对象获取原来的内容    			$s['sid'] 		= !empty($data['app_row_id']) ? $data['app_row_id'] : $data['row_id'];    			$s['app_name']	= $data['app'];    			$s['body']		= $data['content'];    			$s['type']		= $data['table'];    			$s['comment']   = $data['comment_old'];    			model('Share')->shareFeed($s);    		}    		return 1;    	}else{    		return 0;    	}    		}	//返回收藏列表	public function favorite_weibo(){		return model('Collection')->getCollectionForApi($this->mid, $this->since_id, $this->max_id, $this->count, $this->page);	}	//收藏一条资源	public  function favorite_create(){		$data['source_table_name'] = $this->data['source_table_name']; // feed		$data['source_id'] 	= $this->data['source_id'];	 //140		$data['source_app'] = $this->data['source_app']; //public						if( model('Collection')->addCollection($data)){			return 1;		}else{			return 0;		}	}	//取消收藏	public function  favorite_destroy(){		 if( model('Collection')->delCollection($this->data['source_id'], $this->data['source_table_name']) ){		 		return 1;			 }		 return 0;	}	//微博里搜索微博	public function weibo_search_weibo(){		$_REQUEST['p'] = $_REQUEST['page'] = $this->page;		$GLOBALS['ts']['uid'] = $GLOBALS['ts']['mid'] = $this->mid;		return model('Feed')->searchFeed(t($this->data['key']), 'all', $this->max_id, $this->count, true);	}	//微博里搜索用户	public function weibo_search_user(){		$_REQUEST['p'] = $_REQUEST['page'] = $this->page;		$data = model('User')->searchUser(t($this->data['key']), 0, $this->count, $this->max_id, '');		$return  = array();		foreach($data['data'] as $v){			$return[] = model('User')->formatForApi($v, $v['uid'], $this->mid);		}		return  $return;	}	//@最近联系人	public function search_at(){		$users = model('UserData')->where("`key`='user_recentat' and uid=".$this->mid)->getField('value');		$data = unserialize($users);		if ( !$data ){			exit('[]');		}
		exit(json_encode($data));	}	public function search_topic(){		$key = trim ( t ( $_REQUEST['key'] ) );
		$feedtopicDao = model('FeedTopic');
		$data = $feedtopicDao->where("topic_name like '%".$key."%' and recommend=1")->field('topic_id,topic_name')->limit(10)->findAll();		if ( !$data ){			exit('[]');		}
		exit( json_encode($data) );	}
}?>